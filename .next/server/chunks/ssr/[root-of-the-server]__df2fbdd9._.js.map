{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///E:/WebProjects/smallOffer/app/lib/loginservices/api.ts"],"sourcesContent":["import { forgetPasswordType, loginType, signupType, signupStep1Type, signupStep2Type, resetPasswordType, resendEmailCodeType, resendUrlType, logoutType } from \"@/app/types/authTypes\";\r\nimport axios from \"axios\";\r\n\r\nconst BASE_URL = \"https://smalloffertest.onrender.com/api/\";\r\n\r\nexport const axiosInstance = axios.create({\r\n  baseURL: BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\naxiosInstance.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"accessToken\");\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\naxiosInstance.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    if (\r\n      error.response?.status === 401 &&\r\n      !originalRequest._retry &&\r\n      localStorage.getItem(\"refreshToken\")\r\n    ) {\r\n      originalRequest._retry = true;\r\n      try {\r\n        const refreshToken = localStorage.getItem(\"refreshToken\");\r\n        const res = await axios.post(`${BASE_URL}accounts/token/refresh/`, {\r\n          refresh: refreshToken,\r\n        });\r\n\r\n        const { access, refresh } = res.data; // استخراج كلا الحقلين\r\n        localStorage.setItem(\"accessToken\", access); // تحديث الـ access token\r\n        localStorage.setItem(\"refreshToken\", refresh); // تحديث الـ refresh token\r\n\r\n        originalRequest.headers.Authorization = `Bearer ${access}`;\r\n        return axiosInstance(originalRequest);\r\n      } catch (refreshError) {\r\n        localStorage.removeItem(\"accessToken\");\r\n        localStorage.removeItem(\"refreshToken\");\r\n        window.location.href = \"/login\";\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;\r\n\r\n\r\n// Signup\r\nexport const createUserFirst = async (data: signupType) => {\r\n  const response = await axiosInstance.post(\"accounts/register/\", data);\r\n  return response.data;\r\n};\r\n\r\n// Singup Step1\r\nexport const validateUserFirst = async (data: signupStep1Type) => {\r\n  const response = await axiosInstance.post(\"accounts/verify-email/\", data);\r\n  return response.data;\r\n};\r\n\r\n// Singup Step2\r\nexport const createUserSecond = async (data: signupStep2Type) => {\r\n  const response =  await axiosInstance.post(\"accounts/second-register/\", data);\r\n  return response.data;\r\n};\r\n\r\n// Login \r\nexport const loginUser = async (data: loginType) => {\r\n  const response = await axiosInstance.post(\"accounts/login/\", data);\r\n  return response.data;\r\n};\r\n\r\n// Logout\r\nexport const logoutUser = async (data: logoutType) => {\r\n  const response = await axiosInstance.post(\"accounts/logout/\", data);\r\n  return response.data;\r\n};\r\n\r\n// Forget Password \r\nexport const forgetPassword = async (data: forgetPasswordType) => {\r\n  const response =  await axiosInstance.post(\"accounts/password/request-reset/\", data);\r\n  return response.data;\r\n};\r\n\r\n// Reset Password \r\nexport const resetPassword = async (data: resetPasswordType) => {\r\n  const response = await axiosInstance.post(\"accounts/password/set-new/\", data);\r\n  return response.data;\r\n};\r\n\r\n// Resend Code \r\nexport const resendCode = async (data: resendEmailCodeType) => {\r\n  const response = await axiosInstance.post(\"accounts/resend-email/\", data);\r\n  return response.data;\r\n};\r\n\r\n// Resend URL \r\nexport const resendUrl = async (data: resendUrlType) => {\r\n  const response = await axiosInstance.post(\"accounts/password/resend-url/\", data);\r\n  return response.data;\r\n};\r\n\r\n\r\n"],"names":[],"mappings":";;;;;;;;;;;;;AACA;;AAEA,MAAM,WAAW;AAEV,MAAM,gBAAgB,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACxC,SAAS;IACT,SAAS;QACP,gBAAgB;IAClB;AACF;AAEA,cAAc,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACtC,MAAM,QAAQ,aAAa,OAAO,CAAC;IACnC,IAAI,OAAO;QACT,OAAO,OAAO,CAAC,aAAa,GAAG,CAAC,OAAO,EAAE,OAAO;IAClD;IACA,OAAO;AACT;AAEA,cAAc,YAAY,CAAC,QAAQ,CAAC,GAAG,CACrC,CAAC,WAAa,UACd,OAAO;IACL,MAAM,kBAAkB,MAAM,MAAM;IAEpC,IACE,MAAM,QAAQ,EAAE,WAAW,OAC3B,CAAC,gBAAgB,MAAM,IACvB,aAAa,OAAO,CAAC,iBACrB;QACA,gBAAgB,MAAM,GAAG;QACzB,IAAI;YACF,MAAM,eAAe,aAAa,OAAO,CAAC;YAC1C,MAAM,MAAM,MAAM,qIAAA,CAAA,UAAK,CAAC,IAAI,CAAC,GAAG,SAAS,uBAAuB,CAAC,EAAE;gBACjE,SAAS;YACX;YAEA,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,IAAI,EAAE,sBAAsB;YAC5D,aAAa,OAAO,CAAC,eAAe,SAAS,yBAAyB;YACtE,aAAa,OAAO,CAAC,gBAAgB,UAAU,0BAA0B;YAEzE,gBAAgB,OAAO,CAAC,aAAa,GAAG,CAAC,OAAO,EAAE,QAAQ;YAC1D,OAAO,cAAc;QACvB,EAAE,OAAO,cAAc;YACrB,aAAa,UAAU,CAAC;YACxB,aAAa,UAAU,CAAC;YACxB,OAAO,QAAQ,CAAC,IAAI,GAAG;YACvB,OAAO,QAAQ,MAAM,CAAC;QACxB;IACF;IAEA,OAAO,QAAQ,MAAM,CAAC;AACxB;uCAGa;AAIR,MAAM,kBAAkB,OAAO;IACpC,MAAM,WAAW,MAAM,cAAc,IAAI,CAAC,sBAAsB;IAChE,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,oBAAoB,OAAO;IACtC,MAAM,WAAW,MAAM,cAAc,IAAI,CAAC,0BAA0B;IACpE,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,mBAAmB,OAAO;IACrC,MAAM,WAAY,MAAM,cAAc,IAAI,CAAC,6BAA6B;IACxE,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,YAAY,OAAO;IAC9B,MAAM,WAAW,MAAM,cAAc,IAAI,CAAC,mBAAmB;IAC7D,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,aAAa,OAAO;IAC/B,MAAM,WAAW,MAAM,cAAc,IAAI,CAAC,oBAAoB;IAC9D,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,iBAAiB,OAAO;IACnC,MAAM,WAAY,MAAM,cAAc,IAAI,CAAC,oCAAoC;IAC/E,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,gBAAgB,OAAO;IAClC,MAAM,WAAW,MAAM,cAAc,IAAI,CAAC,8BAA8B;IACxE,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,aAAa,OAAO;IAC/B,MAAM,WAAW,MAAM,cAAc,IAAI,CAAC,0BAA0B;IACpE,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,YAAY,OAAO;IAC9B,MAAM,WAAW,MAAM,cAAc,IAAI,CAAC,iCAAiC;IAC3E,OAAO,SAAS,IAAI;AACtB","debugId":null}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":["file:///E:/WebProjects/smallOffer/app/lib/dashboardServices/dashboardApi.ts"],"sourcesContent":["import { changePasswordDashType, deleteAccountType, EmailNotificationsDashType, feedbackEmailType, setUserInfoType, UserAdsResponse } from \"@/app/types/authTypes\";\r\nimport axiosInstance from \"../loginservices/api\";\r\n\r\n// Change Password Dash\r\nexport const changePasswordDash = async (data: changePasswordDashType) => {\r\n  const response = await axiosInstance.post(\"accounts/dashboard/change-password/\", data);\r\n  return response.data;\r\n};\r\n\r\n\r\n// Patch EmailSetting\r\nexport const EmailNotificationsDash = async (data: EmailNotificationsDashType) => {\r\n  const response = await axiosInstance.patch(\"accounts/dashboard/settings/\", data);\r\n  return response.data;\r\n};\r\n\r\n// Get EmailSetting\r\nexport const getEmailNotificationsDash = async () => {\r\n  const response = await axiosInstance.get(\"accounts/dashboard/settings/\" );\r\n  return response.data;\r\n};\r\n\r\n// Delete Account\r\nexport const deleteAccount = async (data: deleteAccountType) => {\r\n  const response = await axiosInstance.delete(\"accounts/dashboard/\", { data  }); // just in delete\r\n  return response.data;\r\n};\r\n\r\n// Send Feedback Email\r\nexport const feedbackEmail = async (data: feedbackEmailType) => {\r\n  const response = await axiosInstance.post(\"accounts/dashboard/settings/feedback/\", data );\r\n  return response.data;\r\n};\r\n\r\n// Send Account Info\r\nexport const setUserInfo = async (data: setUserInfoType) => {\r\n  const response = await axiosInstance.patch(\"accounts/dashboard/\", data );\r\n  return response.data;\r\n};\r\n\r\n// Get UserInfo\r\nexport const getUserInfo= async () => {\r\n  const response = await axiosInstance.get(\"accounts/dashboard/\" );\r\n  return response.data;\r\n};\r\n\r\n// Get user Ads\r\nexport const getUserPosts = async (page: number , page_size : number) => {\r\n  const res = await axiosInstance.get<UserAdsResponse>(\r\n    `accounts/dashboard/posts/cards/?page=${page}&page_size=${page_size}?ordering=-created_at`\r\n  );\r\n  return res.data;\r\n};\r\n\r\n// Get user Fav\r\nexport const getUserFav = async (page: number , page_size : number) => {\r\n  const res = await axiosInstance.get<UserAdsResponse>(\r\n    `accounts/dashboard/favorites/cards/?page=${page}&page_size=${page_size}?ordering=-created_at`\r\n  );\r\n  return res.data;\r\n};"],"names":[],"mappings":";;;;;;;;;;;AACA;;AAGO,MAAM,qBAAqB,OAAO;IACvC,MAAM,WAAW,MAAM,kIAAA,CAAA,UAAa,CAAC,IAAI,CAAC,uCAAuC;IACjF,OAAO,SAAS,IAAI;AACtB;AAIO,MAAM,yBAAyB,OAAO;IAC3C,MAAM,WAAW,MAAM,kIAAA,CAAA,UAAa,CAAC,KAAK,CAAC,gCAAgC;IAC3E,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,4BAA4B;IACvC,MAAM,WAAW,MAAM,kIAAA,CAAA,UAAa,CAAC,GAAG,CAAC;IACzC,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,gBAAgB,OAAO;IAClC,MAAM,WAAW,MAAM,kIAAA,CAAA,UAAa,CAAC,MAAM,CAAC,uBAAuB;QAAE;IAAM,IAAI,iBAAiB;IAChG,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,gBAAgB,OAAO;IAClC,MAAM,WAAW,MAAM,kIAAA,CAAA,UAAa,CAAC,IAAI,CAAC,yCAAyC;IACnF,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,cAAc,OAAO;IAChC,MAAM,WAAW,MAAM,kIAAA,CAAA,UAAa,CAAC,KAAK,CAAC,uBAAuB;IAClE,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,cAAa;IACxB,MAAM,WAAW,MAAM,kIAAA,CAAA,UAAa,CAAC,GAAG,CAAC;IACzC,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,eAAe,OAAO,MAAe;IAChD,MAAM,MAAM,MAAM,kIAAA,CAAA,UAAa,CAAC,GAAG,CACjC,CAAC,qCAAqC,EAAE,KAAK,WAAW,EAAE,UAAU,qBAAqB,CAAC;IAE5F,OAAO,IAAI,IAAI;AACjB;AAGO,MAAM,aAAa,OAAO,MAAe;IAC9C,MAAM,MAAM,MAAM,kIAAA,CAAA,UAAa,CAAC,GAAG,CACjC,CAAC,yCAAyC,EAAE,KAAK,WAAW,EAAE,UAAU,qBAAqB,CAAC;IAEhG,OAAO,IAAI,IAAI;AACjB","debugId":null}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":["file:///E:/WebProjects/smallOffer/app/lib/dashboardServices/dashboardQueries.ts"],"sourcesContent":["import { useQuery } from \"@tanstack/react-query\";\r\nimport { getEmailNotificationsDash, getUserFav, getUserInfo, getUserPosts } from \"./dashboardApi\";\r\nimport { AxiosError } from \"axios\";\r\nimport { EmailNotificationsDashType, getUserInfoType } from \"@/app/types/authTypes\";\r\n\r\n// Email Notification\r\nexport function useGetEmailNotificationsDash() {\r\n  return useQuery<EmailNotificationsDashType, AxiosError>({\r\n    queryKey: [\"accounts/dashboard/settings/\"],\r\n    queryFn: getEmailNotificationsDash,\r\n    staleTime: 1000 * 60 * 5,\r\n    retry: 1,\r\n  });\r\n}\r\n\r\n// User Information\r\nexport function useGetUserInfo() {\r\n  return useQuery<getUserInfoType, AxiosError>({\r\n    queryKey: [\"accounts/dashboard/\"],\r\n    queryFn: getUserInfo,\r\n    staleTime: 1000 * 60 * 5,\r\n    retry: 1,\r\n  });\r\n}\r\n\r\n// Get user Ads\r\nexport const useGetUserPosts = (page: number , page_size : number) => {\r\n  return useQuery({\r\n    queryKey: ['user-ads', page],\r\n    queryFn: () => getUserPosts(page , page_size),\r\n  });\r\n};\r\n\r\n// Get user Fav\r\nexport const useGetUserFav = (page: number, page_size : number) => {\r\n  return useQuery({\r\n    queryKey: ['user-fav', page],\r\n    queryFn: () => getUserFav(page , page_size),\r\n  });\r\n};"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAKO,SAAS;IACd,OAAO,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAA0C;QACtD,UAAU;YAAC;SAA+B;QAC1C,SAAS,+IAAA,CAAA,4BAAyB;QAClC,WAAW,OAAO,KAAK;QACvB,OAAO;IACT;AACF;AAGO,SAAS;IACd,OAAO,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAA+B;QAC3C,UAAU;YAAC;SAAsB;QACjC,SAAS,+IAAA,CAAA,cAAW;QACpB,WAAW,OAAO,KAAK;QACvB,OAAO;IACT;AACF;AAGO,MAAM,kBAAkB,CAAC,MAAe;IAC7C,OAAO,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;QACd,UAAU;YAAC;YAAY;SAAK;QAC5B,SAAS,IAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,MAAO;IACrC;AACF;AAGO,MAAM,gBAAgB,CAAC,MAAc;IAC1C,OAAO,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;QACd,UAAU;YAAC;YAAY;SAAK;QAC5B,SAAS,IAAM,CAAA,GAAA,+IAAA,CAAA,aAAU,AAAD,EAAE,MAAO;IACnC;AACF","debugId":null}},
    {"offset": {"line": 330, "column": 0}, "map": {"version":3,"sources":["file:///E:/WebProjects/smallOffer/app/%28public%29/publicstore/page.tsx"],"sourcesContent":["\"ues client\"\r\nimport { useGetUserInfo } from '@/app/lib/dashboardServices/dashboardQueries';\r\nimport React from 'react'\r\n\r\nconst PublicStore = () => {\r\n\r\n   // get The information from API\r\n   const getUserInfo = useGetUserInfo();\r\n   const { data } = getUserInfo;\r\n\r\n  return (\r\n    <div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PublicStore\r\n"],"names":[],"mappings":";;;;AACA;AADA;;;AAIA,MAAM,cAAc;IAEjB,+BAA+B;IAC/B,MAAM,cAAc,CAAA,GAAA,mJAAA,CAAA,iBAAc,AAAD;IACjC,MAAM,EAAE,IAAI,EAAE,GAAG;IAElB,qBACE,8OAAC;;;;;AAIL;uCAEe","debugId":null}}]
}